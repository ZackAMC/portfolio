---
import { proyectos } from "@/lib/proyectos"
import CardProyect from "@/components/CardProyect.astro"
import ManchaIzqNa from "@/img/ManchaIzqNa.astro"
import PuntosIzq from "@/img/PuntosIzq.astro"
import ManchaDerNa from "@/img/ManchaDerNa.astro"
import PuntosDer from "@/img/PuntosDer.astro"
---

<section class="relative">

<div
    id="proyectos"
    class="
         absolute
         top-[-100px]
         left-0
    ">
</div>

    <ManchaIzqNa
        id="narIzqPro"
    />
    <PuntosIzq
        id="puntosIzqPro"
    />
    <main id="proyectos-main">
        <h2
            id="titProy"
            class=" relative pb-2 mb-14 text-4xl font-['MuseoModerno'] before:content-[''] before:w-[140px] before:h-[3px] before:rounded before:bg-[#FF6025] before:absolute before:bottom-0 before:left-0"
        > 
            <span
                class="font-bold text-[#686868]">Proyectos</span>
        </h2>

        <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-4 px-7 md:px-0">
            {
                proyectos.map(
                    ({nombre, tecnologias, descripcion, img, link}) => (
                        <CardProyect
                            nombre={nombre}
                            tecnologias={tecnologias}
                            descripcion={descripcion}
                            img={img}
                            link={link}
                        /> 
                    )
                )
            }
        </div>
    </main>
    <ManchaDerNa 
        id="narDerPro"
    />
    <PuntosDer 
        id="puntosDerPro"
    />
</section>


<style>
    h2{
        transition: .4s all ease;
        transform: translateX(50%);
        opacity: 0;
    }
    h2.visible{
        transform: translateX(0%);
        opacity: 1;
    }
</style>

<script>


function scrollParallaxProyects() {

    const narIzq = document.getElementById(`narIzqPro`)
    const puntosIzq = document.getElementById(`puntosIzqPro`)
    const narDer = document.getElementById(`narDerPro`)
    const puntosDer = document.getElementById(`puntosDerPro`)



    window.addEventListener('scroll', ()=>{

        let scroll = window.scrollY
        
        narIzq!.style.transform = `translateX(-${scroll * 0.10}px)`
        puntosIzq!.style.transform = `translateX(-${scroll * 0.10}px)`

        narDer!.style.transform = `translateX(${scroll * 0.10}px)`
        puntosDer!.style.transform = `translateX(${scroll * 0.10}px)`

    })
    }

    scrollParallaxProyects()


    const mainDos = document.getElementById('titProy')
    const bloques = Array.from(document.getElementsByTagName('article'))
    // observador al hacer Scroll
    const animacion = bloques.map( (item, i)=>{
        return obser(item, i)
    })
    function obser(itemAnimar : HTMLElement, posicion : number) {
        const observadorTres = new IntersectionObserver(itemAnimar =>{
            setTimeout(() => {
                itemAnimar.forEach( e => {
                    if(e.isIntersecting){
                        itemAnimar[0].target.classList.add('visible')
                    } else {
                        itemAnimar[0].target.classList.remove('visible')
                    }
                })  
            }, 300);
        })
        observadorTres.observe(itemAnimar)
    }
    obser(mainDos!, 0)
    // Asignar delay al entrar segun posicion
    // Dejamos por fuera resoluciones menores a 640 ya que por defecto la animacion ocurrira segun aparezcan en pantalla
    function asignarDelay(ancho : number) {
        const asignacion = bloques.map((card, i)=>{
            // Asignacion de clases segun su posicion y el ancho del viewport
            if(ancho > 640 && ancho < 1024){
                i % 2 == 0 ?
                    card.classList.add('primeros'):
                    card.classList.add('segundos')
            } else if (ancho >= 1024) {
                if (i == 0 || i == 4 || i == 8) {
                    card.classList.add('primeros')
                }
                if (i == 1 || i == 5 || i == 9) {
                    card.classList.add('segundos')
                }
                if (i == 2 || i == 6 || i == 10) {
                    card.classList.add('terceros')
                }
                if (i == 3 || i == 7 || i == 11) {
                    card.classList.add('cuartos')
                }
            } else {
                card.classList.remove('primeros')
                card.classList.remove('segundos')
                card.classList.remove('terceros')
                card.classList.remove('cuartos')
            }
        })
    }
    // seteamos el ancho segun el viewport
    let anchoView = 0
    let anchoInicial = window.innerWidth
    // llamamos la funcion para hacer la asignacion inicial
    asignarDelay(anchoInicial)
    // Detectamos cuando el viewport cambia, limpiamos las clases de los elementos y volvemos a llamar a la funcion para realizar la asignacion dependiendo del ancho de la pantalla
    window.addEventListener('resize', ()=>{
        anchoView = window.innerWidth
        const reset = bloques.map(card=>{
            card.classList.remove('primeros')
            card.classList.remove('segundos')
            card.classList.remove('terceros')
            card.classList.remove('cuartos')
        })
        asignarDelay(anchoView)
    })
</script>